# Bundle IDs
prod_bundle_id = "ru.surfstudio.weather.release"
debug_bundle_id = "ru.surfstudio.weather.debug"

# Schemes
prod_scheme = "WeatherRelease"
debug_scheme = "WeatherDebug"

# Targets
prod_target = "WeatherRelease"
debug_target = "WeatherDebug"

# Project Info
workspace_file = "Weather.xcworkspace"
project_file = "Weather.xcodeproj"

# Firebase
firebase_app_id_debug = "SET_ME_UP"
firebase_app_id_prod = "SET_ME_UP"
firebase_testers = "surfstudio36@gmail.com"
firebase_ci_token = "SET_ME_UP"

# Profiles
debug_release_provision = "ru.surfstudio.weather.debug-Distribution"
prod_release_provision = "ru.surfstudio.weather.release-Distribution"
debug_dev_provision = "ru.surfstudio.weather.debug-Development"
prod_dev_provision = "ru.surfstudio.weather.release-Development"


derived_data_path = "./buildData"

import 'tag_app_icon'
import 'SinginFile'

default_platform :ios

platform :ios do

  ENV["FASTLANE_HIDE_CHANGELOG"] = "true"
  ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "true"

  before_all do |lane, options|
    # ensure_git_status_clean
  end

  desc "Build Debug and Prod Xcode target in Debug configuration"
  desc "Parameters:
  - clean: Pass **true** if you need to clean project before build
  "
  lane :build do |options|
    xcodebuild(
      workspace: workspace_file,
      scheme: prod_scheme,
      configuration: "Debug",
      clean: options[:clean],
      build: true,
      destination: "generic/platform=iOS\" CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=\"",
      xcargs: " -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO build-for-testing",
      derivedDataPath: derived_data_path
    )

    xcodebuild(
      workspace: workspace_file,
      scheme: debug_scheme,
      configuration: "Debug",
      clean: options[:clean],
      build: true,
      destination: "generic/platform=iOS\" CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=\"",
      xcargs: " -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO build-for-testing",
      derivedDataPath: derived_data_path
    )
  end


  desc "Run tests"
  lane :tests do
    run_tests(
    	workspace: workspace_file,
      devices: ["iPhone SE"],
      scheme: prod_scheme,
      code_coverage: true,
      test_without_building: true,
      skip_build: true,
      derived_data_path: derived_data_path,
      output_types: "html,junit"
	)
  end

  desc "Update build number, set tag and push version bump commit to the develop branch if needed"
  desc "Parameters:
  - version_number: Number of version that will be set
  - type: Type of the build which will be set with the tag. For Example: for release candidate builds with tag `1.0.0-rc10` you need to pass `rc`.
  - type_v: Version of current build type (type parameter).
  - skip_push: Pass **true** if you need to skip push commits to the repository. The default is **false**
  "
  lane :prepare_for_integration do |options|
    version_number = options[:version_number]
    if version_number.nil?
      throw "Required version_number parameter"
    end

    build_number = options[:type_v]
    if not build_number.nil?
      increment_build_number_in_plist(build_number: build_number, target: prod_target)
      increment_build_number_in_plist(build_number: build_number, target: debug_target)
    else
      increment_build_number_in_plist(target: prod_target)
      increment_build_number_in_plist(target: debug_target)
    end

    increment_version_number_in_plist(version_number: options[:version_number], target: prod_target)
    increment_version_number_in_plist(version_number: options[:version_number], target: debug_target)

    commit_version_bump(
      xcodeproj: project_file,
      force: true
    )

    tag_label = get_version_number_from_plist(target: prod_target)

    type = options[:type]
    typeIndex = options[:type_v]
    if not type.nil?
      tag_label = tag_label + "-" + type + "" + typeIndex
    end

    add_git_tag(
      tag: tag_label
    )

    skip_push_opt = options[:skip_push]
    needs_to_push = skip_push_opt.to_s.empty? || skip_push_opt.to_s == "false"

    if needs_to_push
      sh("git push", error_callback: ->(result) {
        UI.error "git push failed with result: #{result}"
      })
      sh("git push origin --tags")
    end
  end

  desc "Update build number, set tag and push version bump commit to the develop branch if needed"
  desc "Parameters:
  - type: Type of the build which will be set with the tag. For Example: for release candidate builds with tag `1.0.0-rc10` you need to pass `rc`.
  - skip_push: Pass **true** if you need to skip push commits to the repository. The default is **false**
  "
  lane :prepare_for_beta do |options|
    current_version = get_version_number_from_plist(target: prod_target)
    type = options[:type]
    tag_prefix = current_version + "-" + type

    last_tag_index = get_build_number_from_plist(target: prod_target)
    result_tag_index = last_tag_index.to_i + 1
    build_number = tag_prefix + result_tag_index.to_s

    tag_app_icon(version_number: current_version, build_number: result_tag_index.to_s)

    prepare_for_integration(
      version_number: current_version,
      type: options[:type],
      type_v: result_tag_index.to_s,
      build_number: build_number,
      skip_push: options[:skip_push]
    )
  end

  desc "Set `rc` tag and push to the current branch"
  desc "Parameters:
  - include_beta: Pass **true** to call `prepare_for_beta` lane for debug and prod types
  - skip_push: Pass **true** if you need to skip push commits to the repository. The default is **false**
  "
  lane :prepare_for_release do |options|
    include_beta = options[:include_beta]
    if include_beta.nil? || include_beta.to_s == ""
      throw "Required include_beta parameter"
    end

    if include_beta.to_s == "true"
      prepare_for_beta type:"debug"
      prepare_for_beta type:"prod"
    end

    tag_label = get_version_number_from_plist(target: prod_target)

    type = "rc"
    last_tag_index = get_build_number_from_plist(target: prod_target)

    if not type.nil?
      tag_label = tag_label + "-" + type + "" + last_tag_index
    end

    add_git_tag(
      tag: tag_label
    )

    skip_push_opt = options[:skip_push]
    needs_to_push = skip_push_opt.to_s.empty? || skip_push_opt.to_s == "false"

    if needs_to_push
      sh("git push", error_callback: ->(result) {
        UI.error "git push failed with result: #{result}"
      })
      sh("git push origin --tags")
    end
  end

  desc "Upload a new Beta Build to Firebase"
  desc "Parameters:
  - destination: Type of the build which will be submitted
  "
  lane :beta do |options|
    type = options[:destination]
    bundle_id = prod_bundle_id
    scheme = prod_scheme

    if type == "debug"
      bundle_id = debug_bundle_id
      scheme = debug_scheme
    end

    cocoapods(use_bundle_exec:true)

    gym(
      scheme: scheme,
      configuration: "Debug",
      clean: true,
      include_bitcode: false,
      export_options: {
        compileBitcode: false,
        provisioningProfiles: {
          debug_bundle_id => debug_dev_provision,
          prod_bundle_id => prod_dev_provision,
        }
      },
      export_method: "development"
    )

    upload_to_firebase(destination: options[:destination])
  end

  desc "Upload a new Release Build to iTunesConnect"
  desc "Parameters:
    - destination: debug/prod - Type of the build which will be uploaded, debug by default
  "
  lane :release do |options|
    type = options[:destination]
    bundle_id = debug_bundle_id
    scheme = debug_scheme

    if type == "prod"
        bundle_id = prod_bundle_id
        scheme = prod_scheme
    end

    cocoapods(use_bundle_exec: true)

    cert(development: false)

    gym(
      scheme: scheme,
      configuration: "Release",
      clean: true,
      include_bitcode: false,
      export_options: {
        compileBitcode: false,
        provisioningProfiles: {
            debug_bundle_id => debug_release_provision,
            prod_bundle_id => prod_release_provision,
        }
      },
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates"
    )

    upload_to_app_store(
	  app_identifier: bundle_id,
	  force: true
    )

    refresh_dsyms(destination: options[:destination])
  end

  desc "Uploads a new build to Firebase"
  desc "Parameters:
  - destination: debug/prod - Type of the build which will be uploaded
  "
  lane :upload_to_firebase do |options|
    type = options[:destination]
    app_id = firebase_app_id_debug

    if type == "prod"
      app_id = firebase_app_id_prod
    end

    firebase_app_distribution(
      app: app_id,
      testers: firebase_testers,
      firebase_cli_path: "/usr/local/bin/firebase",
      firebase_cli_token: firebase_ci_token
    )

    clean_build_artifacts # Delete the local dSYM files

  end


  desc "Send dSYMS to Firebase"
  desc "Parameters:
  - destination: debug/prod - Type of the build which will be used to download dSYMS, debug by default
  "
  lane :refresh_dsyms do |options|
    build_number = options[:build_number]
    type = options[:destination]
    bundle_id = debug_bundle_id

    if type == "prod"
      bundle_id = prod_bundle_id
    end

    download_dsyms(app_identifier: bundle_id, version: 'latest') # Download dSYM files from iTC
    upload_symbols_to_crashlytics
    clean_build_artifacts # Delete the local dSYM files
  end

  lane :create_apps_certs_profiles do |options|
    load_signins(
      appleId: options[:appleId],
      debug_app_name: debug_scheme,
      prod_app_name: prod_scheme,
      debug_bundle_id: debug_bundle_id,
      prod_bundle_id: prod_bundle_id,
      debug_dev_provision: debug_dev_provision,
      prod_dev_provision: prod_dev_provision,
      debug_release_provision: debug_release_provision,
      prod_release_provision: prod_release_provision
    )
  end

end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
